diff --git a/admin.py b/admin.py
index 5b9f05d..8b872e0 100644
--- a/admin.py
+++ b/admin.py
@@ -7,7 +7,7 @@ import json
 class MainWindow(QMainWindow):
     def __init__(self):
         super().__init__()
-        self.setWindowTitle("SocketIO GUI")
+        self.setWindowTitle("Admin chat")
         self.channel = "chat"
         self.text_edit = QTextEdit(self)
         self.input_box = QLineEdit(self)
@@ -22,7 +22,7 @@ class MainWindow(QMainWindow):
         self.setCentralWidget(widget)
 
         self.socket = socketio.Client()
-        self.socket.connect("http://127.0.0.1:5000")
+        self.socket.connect("http://10.185.81.196:5000/")
 
         @self.socket.on("chat")
         def handle_message(message):
@@ -64,8 +64,6 @@ class MainWindow(QMainWindow):
             if self.isMinimized():
                 event.ignore()
                 self.hide()
-                self.tray_icon.showMessage(
-                    "SocketIO GUI", "Application minimized to tray.")
         super().changeEvent(event)
 
     def closeEvent(self, event):
diff --git a/app.py b/app.py
index 21916a2..6b951b6 100644
--- a/app.py
+++ b/app.py
@@ -12,7 +12,6 @@ from tool.TTFisClient import TTFisClient
 from tool.ToellnerDriver import ToellnerDriver
 from config import *
 import psutil
-import random
 from werkzeug.utils import secure_filename
 eventlet.monkey_patch()
 stop_event = threading.Event()
@@ -32,281 +31,283 @@ admin = ""
 current = ""
 
 
-def update_scc_trace(trace):
-    """
-    Update scc trace from the ttfis client into remote view
-    Args:
-        trace (string): trace from ttfis
-    """
-    global is_power_turn_on, is_start_up_msg_recv
-    if "SPM_SPMS_R_STARTUP_FINISHED transmission completed" in trace:
-        is_start_up_msg_recv = True
-        socketio.emit("status", "Start Up success")
-        print("Start Up success")
-    if "SPM_SPMS_R_SHUTDOWN_IN_PROGRESS transmission completed" in trace:
-        socketio.emit("status", "Receive SPM_SPMS_R_SHUTDOWN_IN_PROGRES")
-        print("Receive Up success")
-    if is_power_turn_on:
-        socketio.emit("message", trace+"\n", broadcast=True)
-
-
-def update_voltage_and_current_to_server():
-    """
-    Update voltage_returned and current_returned to server
-    :return: None
-    """
-    global socketio, is_power_turn_on, power_source_connection, logged_in_users
-
-    while True:
-        if socketio is not None:
-            if logged_in_users:
-                socketio.emit("list_user", logged_in_users)
-        if power_source_connection == None:
-            if socketio is not None:
-                socketio.emit("update_power_data", data={"voltage_returned": 0,
-                                                         "current_returned": 0})
-            status = "Power source is not connect !!!"
-        else:
-            try:
-                voltage_returned = str(
-                    float(power_source_connection .GetVoltage().decode()))
-                current_returned = str(
-                    float(power_source_connection .GetCurrent().decode()))
-                data = {"voltage_returned": voltage_returned,
-                        "current_returned": current_returned}
-                socketio.emit("update_power_data", data)
-                socketio.emit("status", status)
-            except:
-                pass
-
-        time.sleep(1)
-
-
-def check_process_running(process_name):
-    """
-    Check if a process with the given name is running or not
-    """
-    for proc in psutil.process_iter(['pid', 'name']):
-        if proc.name() == process_name:
-            return True
-    return False
-
-
-def handle_error_from_flash_gui():
-    elapsed_time = 0
-    while True:
-        if check_process_running("FlashGUI.exe"):
-            elapsed_time += 1
-            print("waiting")
-            if elapsed_time >= 120:
-                socketio.emit("status", "Fashing timeout!!!")
-                os.system("taskkill /f /im  FlashGUI.exe")
-                break
-            else:
-                elapsed_time += 1
-                socketio.emit("status", "Wating for flashing...")
-                time.sleep(1)  # wait for 1 second
-        else:
-            print("done")
-            elapsed_time = 0
-            socketio.emit("status", "Ready")
-            break
-
-
-@ app.route('/session_id')
-def get_session_id():
-    return jsonify(session_id=session["emp_id"])
-
-
-def upload_trace_to_ttfis(file_name):
-    """This function uses to upload trace to the ttfis client
-
-    Args:
-        file_name (string): trace file name
-    """
-    socketio.emit("status", "Uploading trace...")
-    time.sleep(1)
-    if ttfisClient.LoadTRCFiles([trace_path+file_name]):
-        socketio.emit("status", "Restarting ttfisClient...")
-        print("Success")
-        ttfisClient.Disconnect(ttfis_client_port)
-        ttfisClient.Connect(ttfis_client_port)
-        ttfisClient.Restart()
-    else:
-        print("failed")
-        socketio.emit("status", "Upload trace failed")
-        time.sleep(1)
-    socketio.emit("status", "Ready")
-
-
-def flash_ccs20_target(file_name):
-    """flash ccs20 target
-
-    Args:
-        file_name (string): the dnl file name
-    """
-    global socketio
-    # print("going to flash_ccs20_target")
-    # socketio.emit("status", "Start FLashGui")
-    # cmd = 'FlashGUI.exe /iQuad-Gen5-DebugAdapter C - FT7HJJJV,1000000,E,8,1 " /f{}/{} /au'.format(
-    #     binary_path, file_name)
-    # subprocess.Popen(cmd, stdout=subprocess.PIPE)
-    # socketio.emit("status", "Flashing...")
-    # handle_error_from_flash_gui()
-
-
-def process_instruction_file(file_path):
-    """
-    Process instruction file
-    Args:
-        file_path (string): instruction file path
-    Returns:
-        lkup_table (dict): lkup table
-    """
-    cmd, extra_cmd = read_cmd_list(file_path)
-    lkup_table = dict()
-    lkup_table["root"] = extract_cmd(cmd)
-    lkup_table["enum"] = extract_enum(extra_cmd)
-    return lkup_table
-
-
-@ socketio.on("lock_status")
-def handle_lock_status(status):
-    print("lock status", status)
-    if status:
-        socketio.emit("lock_status", True, broadcast=True)
-    else:
-        socketio.emit("lock_status", False, broadcast=True)
-
-
-@ app.route('/', methods=['GET', 'POST'])
-def login():
-    if request.method == 'POST':
-        _e_id = request.form["emp_id"]
-        return check_login_users(_e_id.lower())
-    else:
-        error = ''
-        return render_template('signin.html', error=error)
-
-
-def check_login_users(user):
-    global logged_in_users, admin, current
-    error = ''
-    if user in ALLOWED_USER:
-        if len(logged_in_users) == 0:
-            logged_in_users.append(user)
-            print("admin user loggin:", user)
-            session["emp_id"] = user
-            return redirect(url_for('index'))
-        elif user not in logged_in_users:
-            logged_in_users.append(user)
-            session["emp_id"] = user
-            print("New user loggin:", logged_in_users)
-            socketio.emit("list_user", logged_in_users)
-            return redirect(url_for('index'))
-        else:
-            print("User is already logged in", session["emp_id"])
-            return redirect(url_for('index'))
-    else:
-        error = "I'm sorry but you are not allowed"
-        if user == "":
-            return render_template('signin.html', error="")
-        else:
-            return render_template('signin.html', error=error)
-
-
-@socketio.on("chat")
-def chat_msg(msg):
-    socketio.emit("chat", msg)
-
-
-@ app.route('/index')
-def index():
-    if request.method == 'GET':
-        if 'Referer' in request.headers and request.headers['Referer'] + "index" == request.url:
-            refresh_detected = True
-            print(f"Refresh detected: {refresh_detected}")
-            return render_template('index.html')
-        else:
-            refresh_detected = False
-            print(f"No refresh: {refresh_detected}")
-            return render_template('index.html')
-    else:
-        return render_template('index.html')
-
-
-@ app.route('/logout')
-def logout():
-    global logged_in_users
-    print(session["emp_id"])
-    user_remove = str(session["emp_id"])
-    logged_in_users.remove(user_remove)
-    return redirect(url_for('login'))
-
-
-@ app.route("/GetCommandSet/", methods=["GET"])
-def get_command_set():
-    global trace_path
-    if (os.listdir(trace_path)) is None:
-        print("No trace file, using default file name")
-        trace_file_name = DEFAULT_TRACE_FILE_NAME
-    else:
-        trace_file_name = os.listdir(trace_path)[0]
-    traceFilePath = trace_path + trace_file_name
-    return process_instruction_file(traceFilePath)
-
-
-@app.route('/result', methods=['POST'])
-def upload_file():
-    file = request.files['file']
-    if file:
-        filename = secure_filename(file.filename)
-        save_path = os.path.join(
-            app.root_path, 'static', 'uploads/test/', filename)
-        file.save(save_path)
-        return 'File uploaded successfully'
-    else:
-        return 'No file uploaded'
-
-
-@ app.route('/upload', methods=['POST'])
-def handling_file_upload_from_server():
-    global trace_file_name
-    try:
-        file_dnl = request.files['file-dnl']
-        filename_dnl = file_dnl.filename
-        if ALLOWED_FILE[0] in filename_dnl:
-            file_dnl.save(os.path.join(binary_path, filename_dnl))
-            flash_ccs20_target(filename_dnl)
-        else:
-            print("File not found: {}".format(filename_dnl))
-    except:
-        pass
-    try:
-        file_trc = request.files['file-trc']
-        filename_trc = file_trc.filename
-        if ALLOWED_FILE[1] in filename_trc:
-            file_trc.save(os.path.join(trace_path, filename_trc))
-
-            trace_file_name = filename_trc
-            print(trace_file_name)
-            upload_trace_to_ttfis(trace_file_name)
-            socketio.emit("status", "Ready")
-        else:
-            print("File not found: {}".format(filename_trc))
-    except:
-        pass
-    return ""
-
-
-@ socketio.on('message')
-def message_(message):
-    socketio.emit("message", data=message, statusbroadcast=True)
-
-
-@ socketio.on('chat_box')
-def forward_message(message):
-    socketio.emit("chat_box", message, statusbroadcast=True)
+# def update_scc_trace(trace):
+#     """
+#     Update scc trace from the ttfis client into remote view
+#     Args:
+#         trace (string): trace from ttfis
+#     """
+#     global is_power_turn_on, is_start_up_msg_recv
+#     if "SPM_SPMS_R_STARTUP_FINISHED transmission completed" in trace:
+#         is_start_up_msg_recv = True
+#         socketio.emit("status", "Start Up success")
+#         print("Start Up success")
+#     if "SPM_SPMS_R_SHUTDOWN_IN_PROGRESS transmission completed" in trace:
+#         socketio.emit("status", "Receive SPM_SPMS_R_SHUTDOWN_IN_PROGRES")
+#         print("Receive Up success")
+#     if is_power_turn_on:
+#         socketio.emit("message", trace+"\n", broadcast=True)
+
+
+# def update_voltage_and_current_to_server():
+#     """
+#     Update voltage_returned and current_returned to server
+#     :return: None
+#     """
+#     global socketio, is_power_turn_on, power_source_connection, logged_in_users
+
+#     while True:
+#         if socketio is not None:
+#             if logged_in_users:
+#                 socketio.emit("list_user", logged_in_users)
+#         if power_source_connection == None:
+#             if socketio is not None:
+#                 socketio.emit("update_power_data", data={"voltage_returned": 0,
+#                                                          "current_returned": 0})
+#             status = "Power source is not connect !!!"
+#         else:
+#             try:
+#                 is_power_turn_on = True
+#                 voltage_returned = str(
+#                     float(power_source_connection .GetVoltage().decode()))
+#                 current_returned = str(
+#                     float(power_source_connection .GetCurrent().decode()))
+#                 data = {"voltage_returned": voltage_returned,
+#                         "current_returned": current_returned}
+#                 socketio.emit("update_power_data", data)
+#                 socketio.emit("status", status)
+#             except:
+#                 pass
+
+#         time.sleep(1)
+
+
+# def check_process_running(process_name):
+#     """
+#     Check if a process with the given name is running or not
+#     """
+#     for proc in psutil.process_iter(['pid', 'name']):
+#         if proc.name() == process_name:
+#             return True
+#     return False
+
+
+# def handle_error_from_flash_gui():
+#     elapsed_time = 0
+#     while True:
+#         if check_process_running("FlashGUI.exe"):
+#             elapsed_time += 1
+#             print("waiting")
+#             if elapsed_time >= 120:
+#                 socketio.emit("status", "Fashing timeout!!!")
+#                 os.system("taskkill /f /im  FlashGUI.exe")
+#                 break
+#             else:
+#                 elapsed_time += 1
+#                 socketio.emit("status", "Wating for flashing...")
+#                 time.sleep(1)  # wait for 1 second
+#         else:
+#             print("done")
+#             elapsed_time = 0
+#             socketio.emit("status", "Ready")
+#             break
+
+
+# @ app.route('/session_id')
+# def get_session_id():
+#     return jsonify(session_id=session["emp_id"])
+
+
+# def upload_trace_to_ttfis(file_name):
+#     """This function uses to upload trace to the ttfis client
+
+#     Args:
+#         file_name (string): trace file name
+#     """
+#     socketio.emit("status", "Uploading trace...")
+#     time.sleep(1)
+#     global ttfisClient
+#     if ttfisClient.LoadTRCFiles([trace_path+file_name]):
+#         socketio.emit("status", "Restarting ttfisClient...")
+#         print("Success")
+#         ttfisClient.Disconnect(ttfis_client_port)
+#         ttfisClient.Connect(ttfis_client_port)
+#         ttfisClient.Restart()
+#     else:
+#         print("failed")
+#         socketio.emit("status", "Upload trace failed")
+#         time.sleep(1)
+#     socketio.emit("status", "Ready")
+
+
+# def flash_ccs20_target(file_name):
+#     """flash ccs20 target
+
+#     Args:
+#         file_name (string): the dnl file name
+#     """
+#     global socketio
+#     # print("going to flash_ccs20_target")
+#     # socketio.emit("status", "Start FLashGui")
+#     # cmd = 'FlashGUI.exe /iQuad-Gen5-DebugAdapter C - FT7HJJJV,1000000,E,8,1 " /f{}/{} /au'.format(
+#     #     binary_path, file_name)
+#     # subprocess.Popen(cmd, stdout=subprocess.PIPE)
+#     # socketio.emit("status", "Flashing...")
+#     # handle_error_from_flash_gui()
+
+
+# def process_instruction_file(file_path):
+#     """
+#     Process instruction file
+#     Args:
+#         file_path (string): instruction file path
+#     Returns:
+#         lkup_table (dict): lkup table
+#     """
+#     cmd, extra_cmd = read_cmd_list(file_path)
+#     lkup_table = dict()
+#     lkup_table["root"] = extract_cmd(cmd)
+#     lkup_table["enum"] = extract_enum(extra_cmd)
+#     return lkup_table
+
+
+# @ socketio.on("lock_status")
+# def handle_lock_status(status):
+#     print("lock status", status)
+#     if status:
+#         socketio.emit("lock_status", True, broadcast=True)
+#     else:
+#         socketio.emit("lock_status", False, broadcast=True)
+
+
+# @ app.route('/', methods=['GET', 'POST'])
+# def login():
+#     if request.method == 'POST':
+#         _e_id = request.form["emp_id"]
+#         return check_login_users(_e_id.lower())
+#     else:
+#         error = ''
+#         return render_template('signin.html', error=error)
+
+
+# def check_login_users(user):
+#     global logged_in_users, admin, current
+#     error = ''
+#     if user in ALLOWED_USER:
+#         if len(logged_in_users) == 0:
+#             logged_in_users.append(user)
+#             print("admin user loggin:", user)
+#             session["emp_id"] = user
+#             return redirect(url_for('index'))
+#         elif user not in logged_in_users:
+#             logged_in_users.append(user)
+#             session["emp_id"] = user
+#             print("New user loggin:", logged_in_users)
+#             socketio.emit("list_user", logged_in_users)
+#             return redirect(url_for('index'))
+#         else:
+#             print("User is already logged in")
+#             return redirect(url_for('index'))
+#     else:
+#         error = "I'm sorry but you are not allowed"
+#         if user == "":
+#             return render_template('signin.html', error="")
+#         else:
+#             return render_template('signin.html', error=error)
+
+
+# @socketio.on("chat")
+# def chat_msg(msg):
+#     socketio.emit("chat", msg)
+
+
+# @ app.route('/index')
+# def index():
+#     if request.method == 'GET':
+#         if 'Referer' in request.headers and request.headers['Referer'] + "index" == request.url:
+#             refresh_detected = True
+#             print(f"Refresh detected: {refresh_detected}")
+#             return render_template('index.html')
+#         else:
+#             refresh_detected = False
+#             print(f"No refresh: {refresh_detected}")
+#             return render_template('index.html')
+#     else:
+#         return render_template('index.html')
+
+
+# @ app.route('/logout')
+# def logout():
+#     global logged_in_users
+#     print(session["emp_id"])
+#     user_remove = str(session["emp_id"])
+#     logged_in_users.remove(user_remove)
+#     return redirect(url_for('login'))
+
+
+# @ app.route("/GetCommandSet/", methods=["GET"])
+# def get_command_set():
+#     global trace_path
+#     if (os.listdir(trace_path)) is None:
+#         print("No trace file, using default file name")
+#         trace_file_name = DEFAULT_TRACE_FILE_NAME
+#     else:
+#         trace_file_name = os.listdir(trace_path)[0]
+#     traceFilePath = trace_path + trace_file_name
+#     return process_instruction_file(traceFilePath)
+
+
+# @app.route('/result', methods=['POST'])
+# def upload_file():
+#     file = request.files['file']
+#     if file:
+#         filename = secure_filename(file.filename)
+#         save_path = os.path.join(
+#             app.root_path, 'static', 'uploads/test/', filename)
+#         file.save(save_path)
+#         return 'File uploaded successfully'
+#     else:
+#         return 'No file uploaded'
+
+
+# @ app.route('/upload', methods=['POST'])
+# def handling_file_upload_from_server():
+#     global trace_file_name
+#     try:
+#         file_dnl = request.files['file-dnl']
+#         filename_dnl = file_dnl.filename
+#         if ALLOWED_FILE[0] in filename_dnl:
+#             file_dnl.save(os.path.join(binary_path, filename_dnl))
+#             flash_ccs20_target(filename_dnl)
+#         else:
+#             print("File not found: {}".format(filename_dnl))
+#     except:
+#         pass
+#     try:
+#         file_trc = request.files['file-trc']
+#         filename_trc = file_trc.filename
+#         if ALLOWED_FILE[1] in filename_trc:
+#             file_trc.save(os.path.join(trace_path, filename_trc))
+
+#             trace_file_name = filename_trc
+#             print(trace_file_name)
+#             upload_trace_to_ttfis(trace_file_name)
+#             socketio.emit("status", "Ready")
+#         else:
+#             print("File not found: {}".format(filename_trc))
+#     except:
+#         pass
+#     return ""
+
+
+# @ socketio.on('message')
+# def message_(message):
+#     socketio.emit("message", data=message, statusbroadcast=True)
+
+
+# @ socketio.on('chat_box')
+# def forward_message(message):
+#     socketio.emit("chat_box", message, statusbroadcast=True)
 
 
 # @ socketio.on("get_all_data")
@@ -315,116 +316,117 @@ def forward_message(message):
 #     socketio.emit("sync_data_from_arduino", ret)
 
 
-@ socketio.on('request_to_arduino')
-def request_to_arduino(data):
-    time.sleep(.1)
-    if arduino_connection:
-        ret = ""
-        if data['pin'] == 'acc':
-            ret = arduino_connection.send_command(
-                Command.ACC, int(data['state']))
-        elif data['pin'] == 'ign':
-            ret = arduino_connection.send_command(
-                Command.IGN, int(data['state']))
-        elif data['pin'] == 'wd':
-            ret = arduino_connection.send_command(
-                Command.WD, int(data['state']))
-        elif data['pin'] == 'opt2':
-            ret = arduino_connection.send_command(
-                Command.OPT2, int(data['state']))
-        print("pin  ", data['pin'], "ret  ",
-              ret, "state  ", int(data['state']))
-        socketio.emit("return_from_arduino", data={
-            "pin": data['pin'], "ret": ret}, broadcast=True)
+# @ socketio.on('request_to_arduino')
+# def request_to_arduino(data):
+#     time.sleep(.1)
+#     if arduino_connection:
+#         ret = ""
+#         if data['pin'] == 'acc':
+#             ret = arduino_connection.send_command(
+#                 Command.ACC, int(data['state']))
+#         elif data['pin'] == 'ign':
+#             ret = arduino_connection.send_command(
+#                 Command.IGN, int(data['state']))
+#         elif data['pin'] == 'wd':
+#             ret = arduino_connection.send_command(
+#                 Command.WD, int(data['state']))
+#         elif data['pin'] == 'opt2':
+#             ret = arduino_connection.send_command(
+#                 Command.OPT2, int(data['state']))
+#         print("pin  ", data['pin'], "ret  ",
+#               ret, "state  ", int(data['state']))
+#         socketio.emit("return_from_arduino", data={
+#             "pin": data['pin'], "ret": ret}, broadcast=True)
 
 
-@ socketio.on("power_state")
-def set_power_state(state):
-    global power_source_connection, is_power_turn_on
-    if power_source_connection != None:
-        if state:
-            status = "Set ToellnerDriver ON"
-            socketio.emit("update_power_data", json.dumps(normal_voltage))
-        else:
-            print('set pwer off')
-            status = "Set ToellnerDriver OFF"
-            socketio.emit("update_power_data", json.dumps(shutdown_voltage))
-        is_power_turn_on = state
-    else:
-        status = "ToellnerDriver is not connect... Cannot turn on or off"
-        print(status)
-        socketio.emit("status", status)
-        time.sleep(1)
+# @ socketio.on("power_state")
+# def set_power_state(state):
+#     global power_source_connection, is_power_turn_on
+#     if power_source_connection != None:
+#         if state:
+#             print('set pwer on')
+#             status = "Set ToellnerDriver ON"
+#             power_source_connection.SetVoltage(12)
+#         else:
+#             print('set pwer off')
+#             status = "Set ToellnerDriver OFF"
+#             power_source_connection.SetVoltage(0)
+#         is_power_turn_on = state
+#     else:
+#         status = "ToellnerDriver is not connect... Cannot turn on or off"
+#         print(status)
+#         socketio.emit("status", status)
+#         time.sleep(1)
 
 
-@ socketio.on("lock")
-def lock(isLock):
-    socketio.emit("lock", isLock)
+# @ socketio.on("lock")
+# def lock(isLock):
+#     socketio.emit("lock", isLock)
 
 
-@ socketio.on("force_ul")
-def force_unlock():
-    socketio.emit("force_ul")
+# @ socketio.on("force_ul")
+# def force_unlock():
+#     socketio.emit("force_ul")
 
 
-@ socketio.on("sccCommand")
-def sccCommand(cmd):
-    ttfisClient.Cmd(cmd)
+# @ socketio.on("sccCommand")
+# def sccCommand(cmd):
+#     ttfisClient.Cmd(cmd)
 
 
-@ socketio.on('setVoltage')
-def handling_voltage(voltage_value):
-    print(voltage_value)
-    global power_source_connection, is_power_turn_on
-    if power_source_connection != None:
-        if (int(voltage_value) > voltage_max) or (int(voltage_value) <= voltage_min):
-            status = "The voltage must in range {}V - {}V".format(
-                voltage_min, voltage_max)
-        else:
-            power_source_connection.SetVoltage(voltage_value)
-            status = "Set voltage successfully"
-    else:
-        status = "Power source not connected"
-    socketio.emit("status", status)
+# @ socketio.on('setVoltage')
+# def handling_voltage(voltage_value):
+#     print(voltage_value)
+#     global power_source_connection, is_power_turn_on
+#     if power_source_connection != None:
+#         if (int(voltage_value) > voltage_max) or (int(voltage_value) <= voltage_min):
+#             status = "The voltage must in range {}V - {}V".format(
+#                 voltage_min, voltage_max)
+#         else:
+#             power_source_connection.SetVoltage(voltage_value)
+#             status = "Set voltage successfully"
+#     else:
+#         status = "Power source not connected"
+#     socketio.emit("status", status)
 
 
-@ socketio.on("shortToGround")
-def shortToGround(periDevices):
-    print("shortToGround ", periDevices)
+# @ socketio.on("shortToGround")
+# def shortToGround(periDevices):
+#     print("shortToGround ", periDevices)
 
 
-@ socketio.on("shortToBat")
-def shortToBat(periDevices):
-    print("shortToBat ", periDevices)
+# @ socketio.on("shortToBat")
+# def shortToBat(periDevices):
+#     print("shortToBat ", periDevices)
 
 
-@ socketio.on("shut_down")
-def shut_down_target():
-    unplug_acc_ign()
+# @ socketio.on("shut_down")
+# def shut_down_target():
+#     unplug_acc_ign()
 
 
-@ socketio.on("stand_by")
-def stand_by_target():
-    unplug_acc_ign()
+# @ socketio.on("stand_by")
+# def stand_by_target():
+#     unplug_acc_ign()
 
 
-@socketio.on("wake_up")
-def wake_up_target():
-    plug_acc_ign()
+# @socketio.on("wake_up")
+# def wake_up_target():
+#     plug_acc_ign()
 
 
-def unplug_acc_ign():
-    request_to_arduino({"pin": "acc", "state": E_NOK})
-    request_to_arduino({"pin": "ign", "state": E_NOK})
+# def unplug_acc_ign():
+#     request_to_arduino({"pin": "acc", "state": E_NOK})
+#     request_to_arduino({"pin": "ign", "state": E_NOK})
 
 
-def plug_acc_ign():
-    request_to_arduino({"pin": "acc", "state": E_OK})
-    request_to_arduino({"pin": "ign", "state": E_OK})
+# def plug_acc_ign():
+#     request_to_arduino({"pin": "acc", "state": E_OK})
+#     request_to_arduino({"pin": "ign", "state": E_OK})
 
 
 if __name__ == '__main__':
-    subprocess.Popen(["python", "admin.py"])
+    # # subprocess.Popen(["python", "admin.py"])
     # ttfisClient = TTFisClient()
     # ttfisClient.registerUpdateTraceCallback(update_scc_trace)
     # ttfisClient.Connect(ttfis_client_port)
@@ -433,12 +435,11 @@ if __name__ == '__main__':
     # if power_source_connection:
     #     power_source_connection.SetVoltage(12)
     # if arduino_port:
-    # arduino_connection = Arduino(arduino_port)
-    # print("update_voltage_and_current_to_server")
-    Thread(target=update_voltage_and_current_to_server).start()
-    print("start_socketio")
-    socketio.run(app, host='0.0.0.0', port=5000)
-
+    #     arduino_connection = Arduino(arduino_port)
+    # # print("update_voltage_and_current_to_server")
+    # Thread(target=update_voltage_and_current_to_server).start()
+    # print("start_socketio")
+    socketio.run(app, host='0.0.0.0', port=5500)
     # power_source_connection .__del__()
-    arduino_connection.close()
+    # arduino_connection.close()
     # ttfisClient.Quit()
diff --git a/settings.json b/settings.json
index 8ffbd94..37578dd 100644
--- a/settings.json
+++ b/settings.json
@@ -15,7 +15,7 @@
 	},
 	"arduino_port": "COM23",
 	"power_source": {
-		"port": "COM15",
+		"port": "COM27",
 		"channel": 2
 	}
 }
diff --git a/static/js/main.js b/static/js/main.js
index 14094dd..a8d4e7b 100644
--- a/static/js/main.js
+++ b/static/js/main.js
@@ -1,720 +1,6 @@
 $(document).ready(function () {
-	loadParaTable()
-
-	// config socket io
-	var socket = io.connect("http://" + document.domain + ":" + location.port)
-	/* config for autocomplete */
-	let paraTable = {}
-	let sepRegex = /((^|\W)+[^ ]*)/g
-	let state = 0
-	let suggestionList = []
-	let sccLines = ""
-	let lastcommandStr = []
-	let counterCommand = 0
-	let inSelection = false
-	let isLock = false
-	let power_state = false
-	let E_OK = 0
-	let E_NOK = 1
-	let isStandby = false
-	let isShutdown = false
-	const TIMER_5_MINS = 300000
-	let commandTable = {
-		root: new Trie({}),
-		enum: {},
-	}
-	let loggedInUsers = []
-	/* end config for autocomplete */
-
-	/* auto complete beign*/
-	function updateLastCommand(command) {
-		let commandList = sccCommandStr.match(sepRegex)
-		commandList.pop()
-		commandList.push(command)
-		commandList = commandList.map((ele) => ele.trim())
-		console.log("commandList", commandList)
-		sccCommandStr = commandList.join(" ")
-		$("#command_entry").val(commandList.toString().replace(/[,.]/g, " "))
-		console.log("command:  ", $("#command_entry").value)
-		sccLines += sccCommandStr.toString().replace(/[,.]/g, " ")
-		console.log("sccLines", sccLines)
-	}
-
-	async function loadParaTable() {
-		let data = await $.get("http://" + location.host + "/GetCommandSet/")
-		// Insert base command
-		for (let cmd in data["root"]) {
-			commandTable["root"].insert(cmd)
-		}
-
-		// Insert enum name value
-		for (let name in data["enum"]) {
-			commandTable["enum"][name] = new Trie({})
-			for (let value of data["enum"][name]) {
-				commandTable["enum"][name].insert(value)
-			}
-		}
-		paraTable = data["root"]
-	}
-	function parseInput() {
-		let nameList = sccCommandStr.match(sepRegex)
-		let baseCommand = nameList[0]
-		let latestName = nameList.at(-1).trim()
-		let pos = nameList.length
-		return [baseCommand, latestName, pos]
-	}
-	async function doAutoComplete(event) {
-		console.log(event.keyCode)
-		if (9 == event.keyCode) {
-			event.preventDefault()
-			// get suggestion
-			if (!inSelection) {
-				suggestionList = []
-				let [baseCommand, name, pos] = parseInput()
-				if (pos === 1) {
-					suggestionList = commandTable["root"].find(name)
-				} else if (paraTable[baseCommand]) {
-					let enumName = paraTable[baseCommand][pos - 2]
-					if (enumName) {
-						suggestionList =
-							commandTable["enum"][enumName].find(name)
-					}
-				}
-				inSelection = true
-			}
-
-			// cycle through suggestion
-			if (suggestionList.length != 0) {
-				updateLastCommand(suggestionList[state])
-				state = (state + 1) % suggestionList.length
-			}
-		} else {
-			inSelection = false
-			state = 0
-		}
-		if (13 == event.keyCode) {
-			event.preventDefault()
-			socket.emit("sccCommand", sccCommandStr)
-			lastcommandStr.push(sccCommandStr.replace(/[,.]/g, " "))
-			put_trace_to_log_window(sccCommandStr.replace(/[,.]/g, " "))
-			sccLines = ""
-			sccCommandStr = ""
-			$("#command_entry").val("")
-			counterCommand = 0
-		}
-		if (38 == event.keyCode) {
-			if (lastcommandStr.length > counterCommand) counterCommand += 1
-			else counterCommand = 0
-			$("#command_entry").val(lastcommandStr[counterCommand])
-			sccCommandStr = lastcommandStr[counterCommand]
-		}
-		if (40 == event.keyCode) {
-			if (lastcommandStr.length > counterCommand) counterCommand -= 1
-			else counterCommand = lastcommandStr.length
-			$("#command_entry").val(
-				lastcommandStr[counterCommand < 0 ? 0 : counterCommand],
-			)
-			sccCommandStr = lastcommandStr[counterCommand]
-		}
-	}
-	let sccCommandStr = ""
-	$("#command_entry").on("input", function () {
-		sccCommandStr = $(this).val().toUpperCase()
-	})
-	$("#command_entry").on("keydown", function (event) {
-		if (power_state) doAutoComplete(event)
-	})
-	// Update parameter table
-
-	/* auto complete end*/
-
-	/* hardware stub begin */
-
-	$("#power_button").click(function () {
-		power_state = !power_state
-		console.log(power_state)
-		socket.emit("power_state", power_state)
-		if (power_state == true) {
-			$("#ign_button").css("color", "#A6E22E")
-			$("#ign_label").css("color", "#A6E22E")
-			$("#acc_button").css("color", "#A6E22E")
-			$("#acc_label").css("color", "#A6E22E")
-		}
-	})
-
-	$("#set_voltage_button").click(function () {
-		var voltage = parseInt($("#input_voltage").val())
-		socket.emit("setVoltage", voltage)
-		$("#input_voltage").val("")
-		socket.emit("status", "Ready")
-	})
-	var isChatopen = false
-	$("#chat_button").click(function () {
-		console.log("chat")
-		isChatopen = !isChatopen
-		isChatopen == false
-			? ($("#chat_popup").css("display", "none"),
-			  $("#chat_button").css("color", "white"))
-			: ($("#chat_popup").css("display", "block"),
-			  $("#chat_button").css("color", "#A6E22E"))
-	})
-	var chat_message = ""
-	$("#chat_entry").on("input", function () {
-		chat_message = $(this).val()
-	})
-
-	$("#chat_entry").on("keydown", function (event) {
-		if (event.keyCode == 13) {
-			event.preventDefault()
-			if (chat_message === "clear") {
-				$("#chat_box").empty()
-				$("#chat_entry").val("")
-			} else {
-				document.getElementById("chat_box").scrollTop =
-					document.getElementById("chat_box").scrollHeight
-
-				socket.emit("chat", session_id + ":   " + chat_message + "\r\n")
-				$("#chat_entry").val("")
-			}
-			chat_message = ""
-		}
-	})
-
-	var accState = false
-	var wdState = false
-	var ignState = false
-	var opt2State = false
-
-	function handleClick(buttonId, pin) {
-		console.log("click:  ", buttonId, pin)
-		$(buttonId).click(function () {
-			var state = false
-			switch (pin) {
-				case "acc":
-					state = !accState
-					accState = state
-					break
-				case "wd":
-					state = !wdState
-					wdState = state
-					break
-				case "ign":
-					state = !ignState
-					ignState = state
-					break
-				case "opt2":
-					state = !opt2State
-					opt2State = state
-					break
-			}
-			var stateValue = state ? E_OK : E_NOK
-			socket.emit("request_to_arduino", { pin: pin, state: stateValue })
-			socket.on("return_from_arduino", function (response) {
-				if (response.ret === E_OK) {
-					if (state) {
-						$("#" + response.pin + "_button").css(
-							"color",
-							"#A6E22E",
-						)
-						$("#" + response.pin + "_label").css("color", "#A6E22E")
-					} else {
-						$("#" + response.pin + "_button").css("color", "red")
-						$("#" + response.pin + "_label").css("color", "red")
-					}
-				}
-			})
-		})
-	}
-
-	handleClick("#acc_button", "acc")
-	handleClick("#wd_button", "wd")
-	handleClick("#ign_button", "ign")
-	handleClick("#opt2_button", "opt2")
-
-	socket.on("sync_data_from_arduino", function (data) {
-		console.log(data[1], data[4], data[7], data[10])
-		parseInt(data[1]) === 0 ? (accState = true) : (accState = false)
-		parseInt(data[4]) === 0 ? (ignState = true) : (ignState = false)
-		parseInt(data[7]) === 0 ? (wdState = true) : (wdState = false)
-		parseInt(data[10]) === 0 ? (opt2State = true) : (opt2State = false)
-
-		var pinMapping = {
-			1: "acc",
-			4: "ign",
-			7: "wd",
-			10: "opt2",
-		}
-
-		for (var i = 1; i < data.length; i += 3) {
-			var digit = parseInt(data[i])
-			var pin = pinMapping[i]
-
-			if (digit === 0) {
-				$("#" + pin + "_button").css("color", "#A6E22E")
-				$("#" + pin + "_label").css("color", "#A6E22E")
-			} else {
-				$("#" + pin + "_button").css("color", "red")
-				$("#" + pin + "_label").css("color", "red")
-			}
-		}
-	})
-	/* hardware stub end */
-	/* flash and trace upload  begin*/
-	$("#flash_button").click(function () {
-		var file_data = $("#file-dnl-input").prop("files")[0]
-		console.log("flash..")
-		if (file_data == undefined || file_data == null) {
-			$("#status").text("Files is empty")
-		}
-		var form_data = new FormData()
-		form_data.append("file-dnl", file_data)
-		$.ajax({
-			url: "/upload",
-			type: "POST",
-			data: form_data,
-			processData: false,
-			contentType: false,
-			success: function (response) {},
-		})
-	})
-
-	$("#trace_button").click(function () {
-		console.log("trace ...")
-		var file_trc_data = $("#file-trc-input").prop("files")[0]
-		var form_data = new FormData()
-		form_data.append("file-trc", file_trc_data)
-		$.ajax({
-			url: "/upload",
-			type: "POST",
-			data: form_data,
-			processData: false,
-			contentType: false,
-			success: function (response) {},
-		})
-	})
-
-	/* flash and trace upload end*/
-	/* log stub begin */
-	function put_trace_to_log_window(message) {
-		if (isPausing) {
-			// do not thing
-		} else {
-			$("#scc_trace").append(
-				"<div><pre>" +
-					$("<div/>")
-						.text("\r\n" + message)
-						.html() +
-					"</pre></div>",
-			)
-			document.getElementById("scc_trace").scrollTop =
-				document.getElementById("scc_trace").scrollHeight
-			if (isRecording) {
-				recordedText += message
-			} else {
-				recordedText = ""
-			}
-		}
-	}
-
-	$("#clear_scc").click(function () {
-		$("#scc_trace").empty()
-	})
-
-	$("#export_scc").click(function () {
-		console.log("export")
-		{
-			const text = $("#scc_trace").text()
-			let blob = new Blob([text], {
-				type: "text/plain",
-			})
-			let filename = `${new Date().toISOString()}_SCC_Log.pro`
-			saveAs(blob, filename)
-		}
-	})
-
-	$("#log_out_button").click(function () {
-		let index = loggedInUsers.indexOf(session_id)
-		if (index > -1) {
-			loggedInUsers.splice(index, 1)
-		}
-		socket.emit("lock", false)
-		window.location.href = "/logout"
-	})
-	var isRecording = false
-	var recordedText = ""
-
-	$("#record_scc").change(function () {
-		console.log("change")
-		if (this.checked) {
-			isRecording = true
-		} else {
-			isRecording = false
-			var fileName = `recorded_text_${new Date().toISOString()}.pro`
-			var blob = new Blob([recordedText], {
-				type: "text/plain;charset=utf-8",
-			})
-			saveAs(blob, fileName)
-		}
-	})
-
-	var isPausing = false
-	$("#pause_scc").change(function () {
-		if (this.checked) {
-			isPausing = true
-		} else {
-			isPausing = false
-		}
-	})
-	/* log stub end */
-	/* socket event handling begin */
-
-	socket.on("connect", function () {
-		console.log("connect")
-		socket.emit("get_all_data")
-		const lockstatus = JSON.parse(localStorage.getItem("lockstatus"))
-		if (lockstatus != null) {
-			if (
-				lockstatus.lock != undefined &&
-				lockstatus.session != undefined
-			) {
-				isLock = lockstatus.lock
-				if (lockstatus.session == session_id) {
-					loggedInUsers[0] = lockstatus.session
-					$("#lock_button").css("display", "block")
-					console.log("admin lock")
-					socket.emit("lock", isLock)
-					isLock
-						? $("#lock_button").text("Unlock")
-						: $("#lock_button").text("Lock")
-				} else if (loggedInUsers[0] == "") {
-					loggedInUsers[0] = lockstatus.session
-				}
-			}
-		}
-		socket.emit("lock", isLock)
-		isLock == true
-			? $("#lock_status").text("Locked")
-			: $("#lock_status").text("Unlock")
-	})
-	socket.on("disconnect", function () {
-		console.log("disconnect")
-	})
-
-	socket.on("message", function (message) {
-		console.log("trace", message)
-		put_trace_to_log_window(message)
-	})
-	socket.on("chat", function (message) {
-		$("#chat_box").append(
-			"<div><pre>" + $("<div/>").text(message).html() + "</pre></div>",
-		)
-	})
-	socket.on("status", function (status) {
-		$("#status").text(status)
-		console.log($("#status").val())
-	})
-
-	socket.on("update_power_data", function (data) {
-		$("#current_voltage").text(data["voltage_returned"])
-		$("#current_ampe").text(data["current_returned"])
-		if (data["voltage_returned"] != 0 && data["current_returned"] == 0) {
-			updata_target_status("StandBy")
-			isStandby = true
-			isShutdown = true
-		} else {
-			isShutdown = false
-			isStandby = false
-			updata_target_status("Normal")
-		}
-	})
-
-	socket.on("force_ul", function () {
-		console.log("force call")
-		if (loggedInUsers[0] == session_id) {
-			showInformPopup()
-		}
-	})
-	socket.on("list_user", function (user_loggined) {
-		loggedInUsers = user_loggined
-	})
-	/* handling user login end*/
-	socket.on("lock", function (lock_status) {
-		isLock = lock_status
-		console.log("session_id", session_id, "lock_status", lock_status)
-		localStorage.setItem(
-			"lockstatus",
-			JSON.stringify({
-				lock: lock_status,
-				session: loggedInUsers[0],
-			}),
-		)
-		if (loggedInUsers[0] == session_id) {
-			console.log("admin call lock")
-			$("[id]").css("pointer-events", "pointer")
-		}
-		if (loggedInUsers[0] != session_id) {
-			if (isLock) {
-				console.log("lock")
-
-				$("[id]").addClass("disable-click")
-				$("#lock_button").removeClass("disable-click")
-				$("#lock_button").text("Force Unlock")
-				$("#chat_button").removeClass("disable-click")
-				$("#note_label").removeClass("disable-click")
-				$("#chat_entry").removeClass("disable-click")
-			} else {
-				console.log("unlock")
-				$("[id]").removeClass("disable-click")
-			}
-		}
-		if (loggedInUsers[0] == undefined) {
-			loggedInUsers[0] = "admin"
-		}
-		isLock == true
-			? $("#lock_status").text(
-					"Locked by: " + loggedInUsers[0].toString().toUpperCase(),
-			  )
-			: $("#lock_status").text("Unlock")
-	})
-
-	$("#lock_button").click(function () {
-		console.log("lock", session_id, loggedInUsers[0])
-		if (loggedInUsers[0] == session_id) {
-			isLock = !isLock
-			$("#lock_button").css("display", "block")
-			console.log("admin lock")
-			socket.emit("lock", isLock)
-			isLock == true
-				? $("#lock_button").text("Unlock")
-				: $("#lock_button").text("Lock")
-		} else {
-			if ($("#lock_button").text() === "Force Unlock" && isLock == true) {
-				socket.emit("force_ul")
-				console.log("Force Unlock")
-			}
-		}
-		localStorage.setItem(
-			"lockstatus",
-			JSON.stringify({
-				lock: isLock,
-				session: loggedInUsers[0],
-			}),
-		)
-		isLock == true
-			? $("#lock_status").text(
-					"Locked by  " +
-						loggedInUsers[0].toString().toUpperCase().toUpperCase(),
-			  )
-			: $("#lock_status").text("Unlock")
-	})
-
-	let timeoutId
-	let defaultTime = 5
-	var countdownTime = 0
-
-	$("#confirmButton").click(function () {
-		if (loggedInUsers[0] == session_id) {
-			$("#lock_button").text("Lock")
-			hideInformPopup()
-		} else {
-			$("#lock_button").css("display", "none")
-			$("[id]").removeClass("disable-click")
-		}
-
-		isLock = false
-		localStorage.setItem(
-			"lockstatus",
-			JSON.stringify({
-				lock: isLock,
-				session: loggedInUsers[0],
-			}),
-		)
-		socket.emit("lock", isLock)
-	})
-	$("#rejectButton").click(function () {
-		localStorage.setItem(
-			"lockstatus",
-			JSON.stringify({
-				lock: isLock,
-				session: loggedInUsers[0],
-			}),
-		)
-		socket.emit("lock", true)
-		hideInformPopup()
-	})
-
-	function startCountdown() {
-		countdownTime--
-		$("#countdown").text(countdownTime.toString())
-		$("#timer").text(countdownTime.toString())
-		if (countdownTime == 0) {
-			$("#lock_button").css("display", "none")
-			$("[id]").removeClass("disable-click")
-			isLock = false
-			localStorage.setItem(
-				"lockstatus",
-				JSON.stringify({
-					lock: isLock,
-					session: loggedInUsers[0],
-				}),
-			)
-
-			socket.emit("lock", isLock)
-			hideInformPopup()
-		} else {
-			force_timer = setTimeout(startCountdown, 1000)
-		}
-	}
-
-	function showInformPopup() {
-		countdownTime = defaultTime
-		$("#countdown").text(countdownTime.toString())
-		$("#timer").text(countdownTime.toString())
-		$("#force_popup").css("display", "block")
-		startCountdown()
-	}
-	function stopCountdown() {
-		clearTimeout(timeoutId)
-	}
-	function hideInformPopup() {
-		$("#force_popup").css("display", "none")
-		stopCountdown(force_timer)
-	}
-	shortToBat = (periDevice) => {
-		socket.emit("shortToBat", periDevice)
-	}
-	shortToGround = (periDevice) => {
-		socket.emit("shortToGround", periDevice)
-	}
-
-	$("#standby_buton").click(function () {
-		$("#scc_trace").empty()
-		handleTestCase("Set target into standby mode", "stand_by", "red")
-		standby_timer.start()
-	})
-
-	$("#wakeup_buton").click(function () {
-		handleTestCase("Wake up target", "wake_up", "#A6E22E")
-		isShutdown = false
-	})
-
-	$("#shutdown_buton").click(function () {
-		$("#scc_trace").empty()
-		handleTestCase("Shutdown target", "stand_by", "red")
-		shutdown_timer.start()
-	})
-
-	function handleTestCase(statusText, socketEvent, color) {
-		if (power_state) {
-			$("#status").text(statusText)
-			socket.emit(socketEvent)
-			$("#acc_label, #ign_label, #acc_button, #ign_button").css(
-				"color",
-				color,
-			)
-			var checkbox = document.getElementById("record_scc")
-			checkbox.checked = true
-			isRecording = true
-		} else {
-			$("#status").text("Power off. Turn the power on first")
-		}
-	}
-
-	updata_target_status = (status) => {
-		if (power_state) {
-			if (status === "Normal") {
-				$("#power_button, #power_label").css("color", "#A6E22E")
-				$("#target_status").css("color", "#A6E22E")
-			} else {
-				$("#power_button, #power_label").css("color", "red")
-				$("#target_status").css("color", "red")
-			}
-			$("#target_status").text(status.toUpperCase())
-		} else {
-			$("#target_status").text("SHUTDOWN")
-			$("#target_status").css("color", "red")
-		}
-	}
-
-	class Timer {
-		constructor(duration, callback, condition, action) {
-			this.duration = duration
-			this.callback = callback
-			this.action = action
-			this.condition = condition
-			this.timerId = null
-			this.intervalId = null
-		}
-
-		start() {
-			this.timerId = setTimeout(() => {
-				clearInterval(this.intervalId) // Clear the interval when the main timer expires
-				if (!this.condition()) {
-					this.callback()
-				}
-			}, this.duration)
-			this.intervalId = setInterval(() => {
-				if (this.condition()) {
-					console.log("condition met")
-					this.action()
-					var checkbox = document.getElementById("record_scc")
-					checkbox.checked = false
-					isRecording = false
-					var fileName = `recorded_text_${new Date().toISOString()}.pro`
-					var blob = new Blob([recordedText], {
-						type: "text/plain;charset=utf-8",
-					})
-					var formData = new FormData()
-					formData.append("file", blob, fileName)
-
-					fetch("/result", {
-						method: "POST",
-						body: formData,
-					})
-
-					clearTimeout(this.timerId) // Clear the main timer if the condition is met
-					clearInterval(this.intervalId)
-				}
-			}, 100) // Adjust the interval duration as needed
-		}
-
-		stop() {
-			clearTimeout(this.timerId)
-			clearInterval(this.intervalId)
-		}
-	}
-
-	const shutdown_timer = new Timer(
-		TIMER_5_MINS,
-		() => {
-			if (!isShutdown) {
-				put_trace_to_log_window(
-					"5 minutes over!!! Cannot shutdown !!! -> [FAILED]",
-				)
-			}
-		},
-		() => {
-			return isShutdown
-		},
-		() => {
-			put_trace_to_log_window("Shutdown!!! -> [PASSED]")
-		},
-	)
-
-	const standby_timer = new Timer(
-		TIMER_5_MINS,
-		() => {
-			if (!isStandby) {
-				put_trace_to_log_window(
-					"5 minutes over!!! Cannot stand by !!! -> [FAILED]",
-				)
-			}
-		},
-		() => {
-			return isStandby
-		},
-		() => {
-			put_trace_to_log_window("StandBy!!! -> [PASSED]")
-		},
-	)
+	setArduinoRelayButtonStateAndColor("0000")
+	ArduinoRelayButton.forEach(monitorArduinoRelayButtonClick)
+	TargetButtons.forEach(monitorTargetbuttonsClick)
+	PowerButtons.forEach(monitorPowerButtonsClick)
 })
diff --git a/templates/index.html b/templates/index.html
index a5a72c8..94aff1c 100644
--- a/templates/index.html
+++ b/templates/index.html
@@ -32,6 +32,10 @@
     <script type="text/javascript"src="//cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.6/socket.io.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
     <script src="/static/js/trie.js"></script>
+    <script src="/static/js/arduino.js"></script>
+    <script src="/static/js/power.js"></script>
+    <script src="/static/js/target.js"></script>
+    <script src="/static/js/socket.js"></script>
     <script src="/static/js/main.js"></script>
 </head>
 
@@ -112,7 +116,7 @@
                       <i class="fas fa-charging-station fa-3x text-success"></i>
                     </div>
                     <div class="col">
-                      <h1 id="current_ampe">0.2</h1>
+                      <h1 id="current_ampe">0</h1>
                     </div>
                     <div class="col">
                       <h1>A</h1>
@@ -124,7 +128,7 @@
                     <i class="fa fa-search fa-3x text-primary"></i>
                     <div class="row">
                       <div class="col-md-6">
-                        <h2 class="mb-0"id="trace_button" style="cursor:pointer;"> Trace</h2>
+                        <h2 class="mb-0"id="upload_trace_button" style="cursor:pointer;"> Trace</h2>
                       </div>
                       <div class="col-md-6 ">
                         <input class="mb-0" type="file" name="file-dnl" id="file-trc-input">
diff --git a/templates/s.css b/templates/s.css
deleted file mode 100644
index 5c76bf9..0000000
--- a/templates/s.css
+++ /dev/null
@@ -1,282 +0,0 @@
-/********** Template CSS **********/
-:root {
-	--primary: #eb1616;
-	--secondary: #191c24;
-	--light: #6c7293;
-	--dark: #000000;
-}
-
-.back-to-top {
-	position: fixed;
-	display: none;
-	right: 45px;
-	bottom: 45px;
-	z-index: 99;
-}
-
-/*** Spinner ***/
-#spinner {
-	opacity: 0;
-	visibility: hidden;
-	transition: opacity 0.5s ease-out, visibility 0s linear 0.5s;
-	z-index: 99999;
-}
-
-#spinner.show {
-	transition: opacity 0.5s ease-out, visibility 0s linear 0s;
-	visibility: visible;
-	opacity: 1;
-}
-
-/*** Button ***/
-.btn {
-	transition: 0.5s;
-}
-
-.btn-square {
-	width: 38px;
-	height: 38px;
-}
-
-.btn-sm-square {
-	width: 32px;
-	height: 32px;
-}
-
-.btn-lg-square {
-	width: 48px;
-	height: 48px;
-}
-
-.btn-square,
-.btn-sm-square,
-.btn-lg-square {
-	padding: 0;
-	display: inline-flex;
-	align-items: center;
-	justify-content: center;
-	font-weight: normal;
-	border-radius: 50px;
-}
-
-/*** Layout ***/
-.sidebar {
-	position: fixed;
-	top: 0;
-	left: 0;
-	bottom: 0;
-	width: 250px;
-	height: 100vh;
-	overflow-y: auto;
-	background: var(--secondary);
-	transition: 0.5s;
-	z-index: 999;
-}
-
-.content {
-	margin-left: 250px;
-	min-height: 100vh;
-	background: var(--dark);
-	transition: 0.5s;
-}
-
-@media (min-width: 992px) {
-	.sidebar {
-		margin-left: 0;
-	}
-
-	.sidebar.open {
-		margin-left: -250px;
-	}
-
-	.content {
-		width: calc(100% - 250px);
-	}
-
-	.content.open {
-		width: 100%;
-		margin-left: 0;
-	}
-}
-
-@media (max-width: 991.98px) {
-	.sidebar {
-		margin-left: -250px;
-	}
-
-	.sidebar.open {
-		margin-left: 0;
-	}
-
-	.content {
-		width: 100%;
-		margin-left: 0;
-	}
-}
-
-/*** Navbar ***/
-.sidebar .navbar .navbar-nav .nav-link {
-	padding: 7px 20px;
-	color: var(--light);
-	font-weight: 500;
-	border-left: 3px solid var(--secondary);
-	border-radius: 0 30px 30px 0;
-	outline: none;
-}
-
-.sidebar .navbar .navbar-nav .nav-link:hover,
-.sidebar .navbar .navbar-nav .nav-link.active {
-	color: var(--primary);
-	background: var(--dark);
-	border-color: var(--primary);
-}
-
-.sidebar .navbar .navbar-nav .nav-link i {
-	width: 40px;
-	height: 40px;
-	display: inline-flex;
-	align-items: center;
-	justify-content: center;
-	background: var(--dark);
-	border-radius: 40px;
-}
-
-.sidebar .navbar .navbar-nav .nav-link:hover i,
-.sidebar .navbar .navbar-nav .nav-link.active i {
-	background: var(--secondary);
-}
-
-.sidebar .navbar .dropdown-toggle::after {
-	position: absolute;
-	top: 15px;
-	right: 15px;
-	border: none;
-	content: "\f107";
-	font-family: "Font Awesome 5 Free";
-	font-weight: 900;
-	transition: 0.5s;
-}
-
-.sidebar .navbar .dropdown-toggle[aria-expanded="true"]::after {
-	transform: rotate(-180deg);
-}
-
-.sidebar .navbar .dropdown-item {
-	padding-left: 25px;
-	border-radius: 0 30px 30px 0;
-	color: var(--light);
-}
-
-.sidebar .navbar .dropdown-item:hover,
-.sidebar .navbar .dropdown-item.active {
-	background: var(--dark);
-}
-
-.content .navbar .navbar-nav .nav-link {
-	margin-left: 25px;
-	padding: 12px 0;
-	color: var(--light);
-	outline: none;
-}
-
-.content .navbar .navbar-nav .nav-link:hover,
-.content .navbar .navbar-nav .nav-link.active {
-	color: var(--primary);
-}
-
-.content .navbar .sidebar-toggler,
-.content .navbar .navbar-nav .nav-link i {
-	width: 40px;
-	height: 40px;
-	display: inline-flex;
-	align-items: center;
-	justify-content: center;
-	background: var(--dark);
-	border-radius: 40px;
-}
-
-.content .navbar .dropdown-item {
-	color: var(--light);
-}
-
-.content .navbar .dropdown-item:hover,
-.content .navbar .dropdown-item.active {
-	background: var(--dark);
-}
-
-.content .navbar .dropdown-toggle::after {
-	margin-left: 6px;
-	vertical-align: middle;
-	border: none;
-	content: "\f107";
-	font-family: "Font Awesome 5 Free";
-	font-weight: 900;
-	transition: 0.5s;
-}
-
-.content .navbar .dropdown-toggle[aria-expanded="true"]::after {
-	transform: rotate(-180deg);
-}
-
-@media (max-width: 575.98px) {
-	.content .navbar .navbar-nav .nav-link {
-		margin-left: 15px;
-	}
-}
-
-/*** Date Picker ***/
-.bootstrap-datetimepicker-widget.bottom {
-	top: auto !important;
-}
-
-.bootstrap-datetimepicker-widget .table * {
-	border-bottom-width: 0px;
-}
-
-.bootstrap-datetimepicker-widget .table th {
-	font-weight: 500;
-}
-
-.bootstrap-datetimepicker-widget.dropdown-menu {
-	padding: 10px;
-	border-radius: 2px;
-}
-
-.bootstrap-datetimepicker-widget table td.active,
-.bootstrap-datetimepicker-widget table td.active:hover {
-	background: var(--primary);
-}
-
-.bootstrap-datetimepicker-widget table td.today::before {
-	border-bottom-color: var(--primary);
-}
-
-/*** Testimonial ***/
-.progress .progress-bar {
-	width: 0px;
-	transition: 2s;
-}
-
-/*** Testimonial ***/
-.testimonial-carousel .owl-dots {
-	margin-top: 24px;
-	display: flex;
-	align-items: flex-end;
-	justify-content: center;
-}
-
-.testimonial-carousel .owl-dot {
-	position: relative;
-	display: inline-block;
-	margin: 0 5px;
-	width: 15px;
-	height: 15px;
-	border: 5px solid var(--primary);
-	border-radius: 15px;
-	transition: 0.5s;
-}
-
-.testimonial-carousel .owl-dot.active {
-	background: var(--dark);
-	border-color: var(--primary);
-}
diff --git a/templates/signup.html b/templates/signup.html
deleted file mode 100644
index fb676a1..0000000
--- a/templates/signup.html
+++ /dev/null
@@ -1,439 +0,0 @@
-<!DOCTYPE html>
-<html>
-<head>
-    <title>WebADB | Android Debug Bridge WebApp</title>
-    <meta charset="utf-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1" />
-    <meta name="description" content="WebUSB based Android Debug Bridge (adb) host" />
-    <meta name="keywords" content="adb, webusb, android adb, adb host, adb webapp" />
-    <link rel="manifest" href="manifest-webadb.json" />
-    <link rel="stylesheet" type="text/css" href="https://www.w3schools.com/w3css/3/w3.css" />
-    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.2/knockout-min.js"></script>
-    <script src="/webadb.js"></script>
-</head>
-<body>
-  <form>
-    <div id="nowebusb" class="w3-container w3-block w3-sand w3-border w3-border-red w3-left-align w3-round" style="display: none">
-      <p>
-        Ouch! <a href="https://wicg.github.io/webusb">WebUSB API</a> is not supported by your browser.<br>
-        Chrome users may update to version 61.
-      </p>
-    </div>
-    <div id="disclaimer" data-bind="visible: true" class="w3-container w3-block w3-sand w3-border w3-border-orange w3-left-align w3-round" style="display: none">
-
-    </div>
-    <div data-bind="visible: 'usb' in navigator"
-         class="w3-container w3-block w3-sand w3-border w3-border-blue w3-left-align w3-round" style="display: none">
-      <p>
-        <div class="w3-container w3-cell w3-cell-middle">
-          <input type="button" data-bind="click: connect_usb, enable: is_connect_disconnect_enabled(), value: connect_disconnect_value()" class="w3-button w3-green" />
-        </div>
-        <div class="w3-container w3-cell w3-cell-middle">
-          <span data-bind="text: connect_message, visibile: connect_message() != ''"></span>
-        </div>
-      </p>
-    </div>
-    <div data-bind="visible: is_execute_visible()"
-         class="w3-container w3-block w3-sand w3-border w3-border-blue w3-left-align w3-round" style="display: none">
-      <p>
-        <div class="w3-container w3-cell w3-cell-middle">
-          <input type="button" data-bind="click: push_usb, enable: is_execute_enabled() && adb && push_files().length" class="w3-button w3-green" value="Push" />
-        </div>
-        <div class="w3-container w3-cell w3-cell-middle" style="width: 50%">
-          <input type="file" data-bind="event: { change: on_file_select }, enable: is_execute_enabled() && adb" class="w3-input w3-border w3-round"/>
-        </div>
-        <!-- div class="w3-container w3-cell w3-cell-middle" style="width: 20%">
-          <input type="text" data-bind="numeric, value: push_mode, enable: is_execute_enabled() && adb" class="w3-input w3-border w3-round"/>
-        </div -->
-        <div class="w3-container w3-cell w3-cell-middle" style="width: 50%">
-          <input type="text" data-bind="value: push_dest, enable: is_execute_enabled() && adb" class="w3-input w3-border w3-round"/>
-        </div>
-      </p>
-      <p>
-        <div class="w3-container w3-cell w3-cell-middle">
-          <input type="button" data-bind="click: pull_usb, enable: is_execute_enabled() && adb" class="w3-button w3-green" value="Pull" />
-        </div>
-        <div class="w3-container w3-cell w3-cell-middle" style="width: 100%">
-          <input type="text" data-bind="value: pull_filename, enable: is_execute_enabled() && adb" class="w3-input w3-border w3-round"/>
-        </div>
-      </p>
-      <p>
-        <div class="w3-container w3-cell w3-cell-middle">
-          <input type="button" data-bind="click: stat_usb, enable: is_execute_enabled() && adb" class="w3-button w3-green" value="Stat" />
-        </div>
-        <div class="w3-container w3-cell w3-cell-middle" style="width: 100%">
-          <input type="text" data-bind="value: stat_filename, enable: is_execute_enabled() && adb" class="w3-input w3-border w3-round"/>
-        </div>
-      </p>
-      <p>
-        <div class="w3-container w3-cell w3-cell-middle">
-          <input type="submit" data-bind="click: execute_usb, enable: is_execute_enabled()" class="w3-button w3-green" value="Send" />
-        </div>
-        <div class="w3-container w3-cell w3-cell-middle" style="width: 100%">
-          <input type="text" data-bind="value: execute_cmd, enable: is_execute_enabled(), hasFocus: is_execute_enabled()" class="w3-input w3-border w3-round"/>
-        </div>
-      </p>
-    </div>
-    <div data-bind="visible: is_cancel_visible(), style: { visibility: 'visible' }"
-         class="w3-container w3-block w3-sand w3-border w3-border-blue w3-left-align w3-round" style="visibility: hidden">
-      <p>
-        <pre data-bind="text: execute_output, visible: execute_output() != ''" style="font-size: 0.75em"></pre>
-        <div class="w3-container w3-cell w3-cell-middle">
-          <input type="button" data-bind="click: cancel_usb, enable: is_cancel_enabled(), hasFocus: is_cancel_enabled()" class="w3-button w3-green" value="Cancel" />
-        </div>
-      </p>
-    </div>
-    <span id="bottom"></span>
-  </form>
-  <script>
-var params = location.search.substring(1).split("&");
-var is_webapp = false;
-var webusb = null;
-var adb = null;
-var fastboot = null;
-var shell = null;
-var sync = null;
-
-for (p in params) {
-	var pair = params[p].split("=");
-	if (pair[0] == "debug" && pair[1] == "yes")
-		Adb.Opt.debug = true;
-	if (pair[0] == "dump" && pair[1] == "yes")
-		Adb.Opt.dump = true;
-	if (pair[0] == "reuse_key")
-		Adb.Opt.reuse_key = (pair[1] == "yes") ? true : (pair[1] == "no") ? false : parseInt(pair[1]);
-	if (pair[0] == "webapp")
-		is_webapp = (pair[1] == "yes");
-}
-
-function removeElementById(id)
-{
-	let node = document.getElementById(id);
-	if (node != null)
-		node.parentNode.removeChild(node);
-}
-
-async function disconnect_usb()
-{
-	if (shell != null)
-		shell.close();
-	if (sync != null)
-		await sync.abort();
-	webusb.close();
-	webusb = null;
-}
-
-async function connect_usb()
-{
-	try {
-		if (webusb != null) {
-			this.state("disconnecting");
-			disconnect_usb();
-			this.state("ready");
-			return;
-		} else {
-			this.state("connecting");
-			webusb = await Adb.open("WebUSB");
-		}
-
-		if (!webusb || !(webusb.isAdb() || webusb.isFastboot()))
-			throw new Error("Could not open either ADB or Fastboot");
-	}
-	catch(error) {
-		console.log(error);
-		this.connect_message(error.message);
-		this.state("ready");
-		webusb = null;
-		return;
-	}
-
-	if (webusb.isFastboot()) {
-		try {
-			fastboot = null;
-			fastboot = await webusb.connectFastboot();
-			if (fastboot != null) {
-				console.log("FASTBOOT mode");
-				this.state("connected");
-				this.execute_cmd("getvar:all");
-			}
-		}
-		catch(error) {
-			console.log(error);
-			this.connect_message(error.message + " Ensure that the USB port is not in use (i.e. adb server is running).");
-			this.state("ready");
-			fastboot = null;
-			webusb = null;
-			return;
-		}
-	}
-
-	if (webusb.isAdb()) {
-		try {
-			adb = null;
-			adb = await webusb.connectAdb("host::", () =>
-				this.connect_message("Please check the screen of your " + webusb.device.productName + "."));
-
-			if (adb != null) {
-				console.log("ADB mode");
-				this.state("connected");
-				this.execute_cmd("shell:ls -l ");
-				this.stat_filename("/sdcard/Download/test_webadb.txt");
-				this.pull_filename("/sdcard/Download/test_webadb.txt");
-				this.push_dest("/sdcard/Download/test_webadb.txt");
-				this.push_mode("0644");
-			}
-		}
-		catch(error) {
-			console.log(error);
-			this.connect_message(error.message + " Ensure that the USB port is not in use (i.e. adb server is running).");
-			this.state("ready");
-			adb = null;
-			webusb = null;
-			return;
-		}
-	}
-
-	let message = "";
-
-	if (webusb.isAdb())
-		message = "ADB: ";
-	if (webusb.isFastboot())
-		message = "FASTBOOT: ";
-
-	message += webusb.device.productName + " (" + webusb.device.manufacturerName + ")";
-	this.connect_message(message);
-}
-
-async function execute_usb()
-{
-	let output = this.execute_output;
-	let bottom = document.getElementById('bottom');
-	let decoder = new TextDecoder();
-
-	try {
-		if (adb != null ) {
-			this.state("running");
-			output("");
-
-			shell = await adb.open(this.execute_cmd());
-			r = await shell.receive();
-			while (r.cmd == "WRTE") {
-				if (r.data != null) {
-					output(output() + decoder.decode(r.data));
-					bottom.scrollIntoView();
-				}
-
-				shell.send("OKAY");
-				r = await shell.receive();
-			}
-
-			shell.close();
-			shell = null;
-			this.state("connected");
-		}
-
-		if (fastboot != null ) {
-			this.state("running");
-			output("");
-
-			await fastboot.send(this.execute_cmd());
-			r = await fastboot.receive();
-			while (fastboot.get_cmd(r) == "INFO") {
-				output(output() + decoder.decode(fastboot.get_payload(r)) + "\n");
-				r = await fastboot.receive();
-			}
-
-			let payload = fastboot.get_payload(r);
-			if (payload.length > 0)
-				payload += "\n";
-			output(output() + decoder.decode(payload));
-			this.state("connected");
-		}
-	}
-	catch(error) {
-		console.log(error);
-		this.connect_message(error.message);
-		this.state("ready");
-		webusb = null;
-	}
-}
-
-async function stat_usb()
-{
-	let output = this.execute_output;
-	let bottom = document.getElementById('bottom');
-
-	try {
-		if (adb != null ) {
-			this.state("running");
-			output("");
-
-			sync = await adb.sync();
-			let stat = await sync.stat(this.stat_filename());
-			output(JSON.stringify(stat));
-
-			await sync.quit();
-			sync = null;
-			this.state("connected");
-		}
-	}
-	catch(error) {
-		console.log(error);
-		this.connect_message(error.message);
-		this.state("ready");
-		webusb = null;
-	}
-}
-
-async function pull_usb()
-{
-	let output = this.execute_output;
-	let bottom = document.getElementById('bottom');
-
-	try {
-		if (adb != null ) {
-			this.state("running");
-			output("");
-
-			sync = await adb.sync();
-			let content = await sync.pull(this.pull_filename());
-
-			await sync.quit();
-			sync = null;
-			this.state("connected");
-
-			let a = document.createElement("a")
-			a.href = URL.createObjectURL(new Blob([content]));
-			a.download = this.pull_filename().split("/").pop();
-			a.click();
-		}
-	}
-	catch(error) {
-		console.log(error);
-		output(error.message);
-		this.state("connected");
-	}
-}
-
-var xfer_stats_done = 0;
-var xfer_stats_time = 0;
-
-function xfer_stats(start_time, done, total, output)
-{
-	let now = Date.now();
-
-	if (now - xfer_stats_time < 500)
-		return;
-
-	if (xfer_stats_done > done)
-		xfer_stats_done = 0;
-	if (xfer_stats_time < start_time)
-		xfer_stats_time = start_time;
-
-	let delta = Math.round((now - start_time) / 1000);
-	let instant = Math.round(((done - xfer_stats_done) * 1000) / ((now - xfer_stats_time) * 1024));
-	let average = Math.round(done * 1000 / ((now - start_time) * 1024));
-
-	xfer_stats_done = done;
-	xfer_stats_time = now;
-
-	let out = "";
-	out += Math.round(100 * done / total) + "% (";
-	out += Math.round(done / 1024) + " KiB in ~" + delta + " secs at avg " + average + " KiB/s, cur " + instant + " KiB/s)";
-	output(out);
-}
-
-async function push_usb()
-{
-	let output = this.execute_output;
-	let bottom = document.getElementById('bottom');
-
-	try {
-		if (adb != null ) {
-			this.state("running");
-			output("Loading " + this.push_files()[0].name + "...");
-
-			sync = await adb.sync();
-			let start_time = Date.now();
-			await sync.push(this.push_files()[0], this.push_dest(), this.push_mode(),
-				(done, total) => xfer_stats(start_time, done, total, output));
-
-			await sync.quit();
-			sync = null;
-			this.state("connected");
-		}
-	}
-	catch(error) {
-		console.log(error);
-		output(error.message);
-		this.state("connected");
-	}
-}
-
-function WebADBViewModel()
-{
-	this.state = ko.observable("ready");
-	this.is_webapp = ko.observable(is_webapp);
-
-	this.connect_message = ko.observable();
-	this.execute_cmd = ko.observable();
-	this.execute_output = ko.observable();
-	this.stat_filename = ko.observable();
-	this.pull_filename = ko.observable();
-	this.push_dest = ko.observable();
-	this.push_mode = ko.observable();
-	this.push_files = ko.observable([]);
-
-	this.connect_disconnect_value = function() {
-		return this.state() == "ready" || this.state() == "connecting" ? "Connect" : "Disconnect";
-	};
-
-	this.is_connect_disconnect_enabled = function() {
-		return this.state() != "running" && this.state() != "connecting";
-	};
-
-	this.is_execute_visible = function() {
-		return this.state() == "connected" || this.state() == "running";
-	};
-
-	this.is_execute_enabled = function() {
-		return this.state() == "connected";
-	};
-
-	this.is_cancel_visible = function() {
-		return this.state() == "connected" || this.state() == "running";
-	};
-
-	this.is_cancel_enabled = function() {
-		return this.state() == "running";
-	};
-
-	this.on_file_select = function(vm, evt) {
-		this.push_files(evt.target.files);
-	}
-
-	this.connect_usb = connect_usb;
-	this.execute_usb = execute_usb;
-	this.stat_usb = stat_usb;
-	this.pull_usb = pull_usb;
-	this.push_usb = push_usb;
-
-	this.cancel_usb = async function() {
-		if (shell != null)
-			shell.close();
-		if (sync != null)
-			await sync.abort();
-		this.state("connected");
-	};
-}
-
-if ('usb' in navigator) {
-	removeElementById("nowebusb");
-	ko.applyBindings(new WebADBViewModel());
-} else {
-	let nowebusb = document.getElementById("nowebusb");
-	nowebusb.style.display = null;
-}
-  </script>
-</body>
-</html>
\ No newline at end of file
